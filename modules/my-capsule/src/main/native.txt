//    protected Process launch(List<String> args) throws IOException, InterruptedException {
//        ProcessBuilder pb = null;
//        try {
//            Method method = Capsule.class.getDeclaredMethod("prelaunch", List.class);
//            method.setAccessible(true);
//            pb = (ProcessBuilder)method.invoke(this, args);
//        }
//        catch( Exception e ) {
//            throw new RuntimeException(e);
//        }
//
//        pb.command().set(0, "/usr/local/bin/drip");
//
//        Runtime.getRuntime().addShutdownHook(new Thread(this));
//        return pb.start();
//    }


    protected ProcessBuilder prelaunch(List<String> args) {
        final List<String> jvmArgs = ManagementFactory.getRuntimeMXBean().getInputArguments();
        ProcessBuilder pb = launchCapsuleArtifact(jvmArgs, args);
        if (pb == null)
            pb = prepareForLaunch(jvmArgs, args);
        return pb;
    }



//    protected Process launch(List<String> args) throws IOException, InterruptedException {
//        ProcessBuilder pb = null;
//        try {
//            Method method = Capsule.class.getDeclaredMethod("prelaunch", List.class);
//            method.setAccessible(true);
//            pb = (ProcessBuilder)method.invoke(this, args);
//        }
//        catch( Exception e ) {
//            throw new RuntimeException(e);
//        }
//
//        List<String> cmdLine = pb.command();
//
//        // the program name
//        String program = cmdLine.get(0);
//
//        // the app params
//        String[] params = new String[ cmdLine.size()-1 ];
//        for( int i=0; i<params.length; i++ ) {
//            params[i]=cmdLine.get(i+1);
//        }
//
//        // the env
//        String[] env = new String[ pb.environment().size() ];
//        int i=0;
//        for( Map.Entry<String,String> entry : pb.environment().entrySet() ) {
//            env[i++] = entry.getKey() + "=" + entry.getValue();
//        }
//
//        // launch it
//        int result = POSIXFactory.getPOSIX().execve(program, params, env);
//        System.exit(result);
//        return null;
//    }