/*
 * Copyright 2024-2025, Seqera Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nextflow.trace.config

import groovy.transform.CompileStatic
import nextflow.config.schema.ConfigOption
import nextflow.config.schema.ConfigScope
import nextflow.config.schema.ScopeName
import nextflow.script.dsl.Description
import nextflow.trace.TraceHelper

@ScopeName("timeline")
@Description("""
    The `timeline` scope controls the execution timeline report generated by Nextflow.
""")
@CompileStatic
class TimelineConfig implements ConfigScope {

    @ConfigOption
    @Description("""
        Create the timeline report on workflow completion file (default: `false`).
    """)
    final boolean enabled

    @ConfigOption
    @Description("""
        Timeline file name (default: `'timeline-<timestamp>.html'`).
    """)
    final String file

    @ConfigOption
    @Description("""
        Overwrite any existing timeline file with the same name (default: `false`).
    """)
    final boolean overwrite

    /* required by extension point -- do not remove */
    TimelineConfig() {}

    TimelineConfig(Map opts) {
        enabled = opts.enabled as boolean
        file = opts.file ?: defaultFileName()
        overwrite = opts.overwrite as boolean
    }

    static final String defaultFileName() {
        return "timeline-${TraceHelper.launchTimestampFmt()}.html"
    }

}
