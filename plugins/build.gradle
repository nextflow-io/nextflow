apply plugin: 'java'

ext.aws_access_key_id = project.findProperty('aws_access_key_id') ?: System.getenv('AWS_ACCESS_KEY_ID')
ext.aws_secret_access_key = project.findProperty('aws_secret_access_key') ?: System.getenv('AWS_SECRET_ACCESS_KEY')
ext.publishRepoUrl = project.findProperty('publish_repo_url') ?: System.getenv('PUBLISH_REPO_URL') ?: ( version.endsWith('-SNAPSHOT') ? "s3://maven.seqera.io/snapshots" : "s3://maven.seqera.io/releases" )
jar.enabled = false

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = 'io.nextflow'
    version = project.file('VERSION').text.trim()

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    /*
     * Copy the plugin dependencies in the subproject `build/target/libs` directory
     */
    task copyPluginLibs(type: Sync) {
        group 'nextflow'
        from configurations.runtimeClasspath
        into 'build/target/libs'
    }


    jar {
        from sourceSets.main.allSource
        doLast {
            file("$buildDir/tmp/jar").deleteDir()
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    /*
     * publish jars maven repo on S3 
     */
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
            }
        }
        repositories {
            maven {
                url = System.getenv('MAVEN_PUBLISH_URL') ?: 's3://maven.seqera.io'
                url = version.endsWith('-SNAPSHOT') ? "$url/snapshots" : "$url/releases"

                credentials(AwsCredentials) {
                    accessKey = System.getenv('AWS_ACCESS_KEY_ID') ?: findProperty('aws_access_key_id')
                    secretKey = System.getenv('AWS_SECRET_ACCESS_KEY') ?: findProperty('aws_secret_access_key')
                }
            }
        }
    }
}

/**
 * Publish jars to maven repositories
 */
task publishPluginsToMaven {
    dependsOn subprojects.publish
}
/*
 * "install" the plugin the project root build/plugins directory
 */
project.parent.tasks.getByName("assemble").dependsOn << assemble

/*
 * Copies the plugins required dependencies in the corresponding lib directory
 */
classes.dependsOn subprojects.copyPluginLibs

